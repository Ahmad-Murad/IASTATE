/**
 * 
 */
package iastate.edu.cs311;

import java.util.ArrayList;
import java.util.Random;

import org.junit.BeforeClass;
import org.junit.Test;

/**
 * @author aguibert
 * 
 */
public class TestSort
{
    private enum TYPE {
        INCREASING,
        DECREASING,
        SAME,
        RANDOM
    }

    @BeforeClass
    public static void init()
    {
        InsertionSort<Integer> is = new InsertionSort<Integer>();

        ArrayList<Integer> arr = new ArrayList<Integer>(5);
        fillArr(arr, 10, TYPE.INCREASING);
        int time = is.analyzeSort(arr);
        System.out.println("Sorted arr is: " + arr.toString());
        if (!isSorted(arr))
            System.out.println("Array not sorted.");
    }

    @Test
    public void testIncreasingSize() {

    }

    private static ArrayList<Integer> fillArr(int size, TYPE fillType) {
        ArrayList<Integer> list = new ArrayList<Integer>(size);

        if (TYPE.INCREASING == fillType) {
            for (int i = 0; i < size; i++)
                list.add(new Integer(size - i));
        }
        else if (TYPE.SAME == fillType) {
            for (int i = 0; i < size; i++)
                list.add(new Integer(5));
        }
        else if (TYPE.RANDOM == fillType) {
            Random rand = new Random();
            for (int i = 0; i < size; i++) {
                list.add(new Integer(rand.nextInt()));
            }
        } else {
            throw new RuntimeException("Invalid fillType of: " + fillType);
        }

        System.out.println("Created array: " + list.toString());
    }

    private static boolean isSorted(ArrayList<Integer> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            if (list.get(i).compareTo(list.get(i + 1)) == 1) {
                return false;
            }
        }
        return true;
    }
}
