/**
 * 
 */
package iastate.edu.cs311;

import java.util.ArrayList;
import java.util.Random;

/**
 * @author aguibert
 * 
 */
public class QuickSort<E extends Comparable<? super E>> implements SortAnalysis<E> {

    private static Random rand = new Random();

    public QuickSort() {}

    @Override
    public int analyzeSort(ArrayList<E> list) {
        long startTime = System.currentTimeMillis();
        doQuickSort(list, 0, list.size() - 1);
        long endTime = System.currentTimeMillis();
        return (int) (endTime - startTime);
    }

    private void doQuickSort(ArrayList<E> list, int left, int right) {
        int pivotIndex = rand.nextInt(right - left) + left;
        E pivotValue = list.get(pivotIndex);

        // swap pivot with rightmost element
        list.set(pivotIndex, list.get(right));
        list.set(right, pivotValue);
        
        int swapIndex = left;
        for(int i = left; i < right -1; i++){
            // if list[i] <= pivotValue, need to swap
            if(list.get(i).compareTo(pivotValue) != 1){
                E tmp = list.get(i);
                list.set(i, list.get(swapIndex));
                list.set(swapIndex, tmp);
                swapIndex++;
            }
            E tmp1 = list.get(swapIndex);
            list.set(swapIndex, list.get(right));
            list.set(right, tmp1);
        }
    }
}
